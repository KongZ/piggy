apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "piggy-webhooks.fullname" . }}
  labels:
    {{- include "piggy-webhooks.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "piggy-webhooks.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "piggy-webhooks.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "piggy-webhooks.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TLS_CERT_FILE
              value: /certs/tls.crt
            - name: TLS_PRIVATE_KEY_FILE
              value: /certs/tls.key
            - name: LISTEN_ADDRESS
              value: ":{{ .Values.port }}"
            - name: DEBUG
              value: "{{ .Values.debug | default false }}"
            - name: PIGGY_ENV_IMAGE
              value: "{{ .Values.mutate.image.repository }}:{{ include "piggy-webhooks.piggy-env.version" . }}"
            - name: PIGGY_ENV_IMAGE_PULL_POLICY
              value: "{{ .Values.mutate.image.pullPolicy }}"
          {{- if .Values.aws.roleArn }}
            - name: AWS_ROLE_ARN
              value: "{{ .Values.aws.roleArn }}"
            - name: AWS_WEB_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
          {{- end }}
            {{- range $key, $val := .Values.env }}
            - name: {{  $key | quote | upper }}
              value: {{ $val | quote }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: {{ .Values.port }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: {{ .Values.port }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /certs
              name: certs
          {{- if .Values.aws.roleArn }}
            - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
              name: aws-iam-token
              readOnly: true
          {{- end }}
          {{- if .Values.volumeMounts }}
            {{ toYaml .Values.volumeMounts | nindent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: {{ include "piggy-webhooks.certificate" . }}
      {{- if .Values.aws.roleArn }}
        - name: aws-iam-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: sts.amazonaws.com
                expirationSeconds: 86400
                path: token
      {{- end }}
      {{- if .Values.volumes }}
        {{ toYaml .Values.volumes | nindent 8 }}
      {{- end }}