{{- $tlsCrt := "" }}
{{- $tlsKey := "" }}
{{- $caCrt := "" }}

{{- if not .Values.mutate.certificate.certManager.enabled}}
{{- if .Values.mutate.certificate.generate }}
{{- $validity := required "Required a validity" .Values.mutate.certificate.certValidity | int }}
{{- $caName := include "piggy-webhooks.rootCACertificate" . -}}
{{- $caValidity := mul 10 $validity | int -}}
{{- $ca := genCA $caName $caValidity }}
{{- $svcName := include "piggy-webhooks.fullname" . }}
{{- $cn := printf "%s.%s.svc" $svcName .Release.Namespace }}
{{- $altName1 := printf "%s.cluster.local" $cn }}
{{- $altName2 := printf "%s" $cn }}
{{- $signedCert := genSignedCert $cn nil (list $altName1 $altName2) $validity $ca }}
{{- $tlsCrt = b64enc $signedCert.Cert }}
{{- $tlsKey = b64enc $signedCert.Key }}
{{- $caCrt =  b64enc $ca.Cert }}
{{- else }}
{{- $tlsCrt = required "Required when certificate.generate is false" .Values.mutate.certificate.tls.crt }}
{{- $tlsKey = required "Required when certificate.generate is false" .Values.mutate.certificate.tls.key }}
{{- $caCrt = required "Required when certificate.generate is false" .Values.mutate.certificate.ca.crt }}
{{- end }}

{{- if $tlsCrt }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "piggy-webhooks.certificate" . }}
data:
  tls.crt: {{ $tlsCrt }}
  tls.key: {{ $tlsKey }}
  ca.crt:  {{ $caCrt }}
{{- end }}
{{- end }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: {{ include "piggy-webhooks.fullname" . }}
{{- if .Values.mutate.certificate.certManager.enabled }}
  annotations:
    cert-manager.io/inject-ca-from: "{{ .Release.Namespace }}/{{ include "piggy-webhooks.certificate" . }}"
{{- end }}
webhooks:
  - name: {{ include "piggy-webhooks.fullname" . }}.{{ .Release.Namespace }}.svc
    admissionReviewVersions: ["v1"]
    {{- if .Values.mutate.timeoutSeconds }}
    timeoutSeconds: {{ .Values.mutate.timeoutSeconds }}
    {{- end }}
    clientConfig:
      service:
        name: {{ include "piggy-webhooks.fullname" . }}
        namespace: {{ .Release.Namespace }}
        path: "/mutate"
      caBundle: {{ $caCrt }}
    rules:
      - operations: [ "CREATE" ]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["pods"]
    failurePolicy: {{ .Values.mutate.podsFailurePolicy }}
    sideEffects: None
